substitutions:
  name: esphome-web-a2dc90
  friendly_name: ESP
  lcd_width: '16'
  lcd_height: '2'
  scroll_speed: 1s



esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'
  includes:
  # - door_lock_rfid.h
  #- uart_read_line_sensor.h
  #libraries:
 # - "SPI"
  #- "MFRC522"
  # Need to override -Wl,-T - the only way is by setting all build_flags
  #platformio_options:
    #build_flags: -DESPHOME_LOG_LEVEL=ESPHOME_LOG_LEVEL_DEBUG -DUSE_STORE_LOG_STR_IN_FLASH -Wl,-Teagle.flash.4m1m.ld -fno-exceptions  
globals:
  - id: glbl_timeout_length_ticks
    type: int
    restore_value: yes
    # 5 min * 60 seconds = 300
    initial_value: "2"



esp32:
  board: esp32dev
  framework:
    type: arduino

sensor:
  - platform: homeassistant
    id: bania_temperature
    entity_id: sensor.bania_temperature
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    #attribute: departure_time
    internal: True  

  - platform: homeassistant
    id: weather
    entity_id: weather.u_doma #
    attribute: temperature
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    internal: True 
   
text_sensor:
  - platform: homeassistant
    id: tm22
    entity_id: sensor.tm22 # sensor ot home assistant za vreme na pristigane na tramvai 22
    #attribute: departure_time
    internal: False

    
  - platform: homeassistant
    id: weatherstate
    entity_id: weather.u_doma #sensor za vreme ot home assistant
    #attribute: state

  - platform: template #rfid posleden skaniran tag
    name: ${friendly_name} last_tag
    id: rfid_tag
  - platform: homeassistant
    name: "Custom Text Display L1"
    id: text_display_l1
    entity_id: input_text.text_display_l1
  - platform: homeassistant
    name: "Custom Text Display L2"
    id: text_display_l2
    entity_id: input_text.text_display_l2  
         


    #Kontrol na podsvetkata
  - platform: homeassistant    
    id: display_backlight
    entity_id: input_number.lcd_display_backlight_level
    internal: true
    on_value:
      then:
        - output.turn_on: backlight
        - output.set_level:
            id: backlight
            level: !lambda |-
              return atoi(id(display_backlight).state.c_str()) / 100.0; 

#ne se izpolzva
light: 
  - platform: monochromatic
    output: backlight
    name: "LCD Display Backlight"
    id: light_backlight
    restore_mode: ALWAYS_ON  

  - platform: status_led
    name: "GREEN LED"
    id: greenled
    pin: GPIO26  
       

time:
- platform: homeassistant
  id: my_time
  timezone: "Europe/Sofia"


i2c: #for lcd lcd_pcf8574
  sda: 21
  scl: 22
  frequency: 400kHz
  scan: False
  
display:
  - platform: lcd_pcf8574
    dimensions: 20x4
    id: lcd_display
    address: 0x27
    update_interval: 1s
    #lambda: |-
      #it.strftime(0, 0, " %H:%M:%S", id(my_time).now());
      #it.strftime(0, 2, "%d-%m-%Y", id(my_time).now());
      #it.printf(0, 1, "Outside: %.1f C", id(weather).state);
      #it.printf(0, 3, "Inside: %.1f C", id(bania_temperature).state);
      #it.printf(8, 0, "TM22: %.1f ", id(tm22));
      #it.printf(id(weatherstate).state.c_str());
      #it.printf(0, 3, "IN: %.1f C", id(bania_temperature).state);
      #it.printf(10, 1,  "%s", id(frontdoor).state ? "ON" : "OFF");
    lambda: |-
      if (id(frontdoor).state) {
        id(lcd_display).backlight();
        fflush(stdout);
        it.print( 8, 1, "DOOR Opening");
      } else if (id(doorlock).state) { 
          it.print( 0, 1,  "WELLCOME"); 
          it.strftime(0, 0, "%H:%M - %d.%m.%Y", id(my_time).now());
          it.printf(0, 2, "TEMP: %.1f C", id(weather).state);
          it.printf(9,3,id(tm22).state.c_str()); 
          it.printf(0,3,"TM22:<---"); 
          it.printf(14,2,id(weatherstate).state.c_str());
      } else {
          it.printf(0, 1,id(text_display_l1).state.c_str());
          it.strftime(0, 0, "%H:%M - %d.%m.%Y", id(my_time).now());
          it.printf(0, 2, "TEMP: %.1f C", id(weather).state);
          it.printf(9,3,id(tm22).state.c_str()); 
          it.printf(0,3,"TM22:<---"); 
          it.printf(14,2,id(weatherstate).state.c_str());
      } 

output:
  - platform: ledc
    pin: GPIO27
    id: backlight
                 
#SPI ZA RC522
spi:
  clk_pin: GPIO14 # SCK on this board
  mosi_pin: GPIO13 # MOSI (misspelt MOIS)
  miso_pin: GPIO12 # MISO

rc522_spi:
  cs_pin: GPIO15 # SDA on this board I reckon (no idea why -- I suspect they just change a jumper for I2C board)
  #reset_pin: GPIO16 # RST
  on_tag:
    then:        
      - homeassistant.tag_scanned: !lambda 'return x;'
      - if:
          condition:
            or:
            - binary_sensor.is_on: TAG
            - binary_sensor.is_on: CARD
          then: #this is where you would code your actions
            - logger.log: "Valid NFC tag detected" 
            - switch.turn_on: doorlock    
            
          else:
            - logger.log: "Invalid NFC tag detected" 
      #izprashta tekstov sensor s posledno skaniran tag           
      - text_sensor.template.publish:
          id: rfid_tag
          state: !lambda 'return x;'
        
      #pri skanirane usilva podsvetkata na 100% za 10sec, sled tova q vuzstanovqva          
      - output.turn_on: backlight
      - output.set_level:
            id: backlight
            level: 100%
      - delay: 10s
      - output.set_level:
            id: backlight
            level: !lambda |-
              return atoi(id(display_backlight).state.c_str()) / 100.0;

#Relay Push
switch:
  - platform: gpio
    pin: GPIO17
    restore_mode: ALWAYS_OFF
    inverted: true
    id: doorlock
    name: "Door lock Push"
    icon: "mdi:lock-outline"
    on_turn_on:
    - output.set_level:
            id: backlight
            level: 100%               
    - delay: 
         seconds: 2
    - switch.turn_off: doorlock

number:
  - name: "RFID Timeout"
    id: timeout_length
    platform: template
    entity_category: "config"
    # TODO: maybe it's a better UX to do this in minutes and do the conversion in esphome
    unit_of_measurement: seconds
    mode: box
    min_value: 2
    max_value: 50
    step: 1
    lambda: |-
      return (int) id(glbl_timeout_length_ticks);      

    set_action:
      then:
        - globals.set:
            id: glbl_timeout_length_ticks
            value: !lambda |-
              // TODO: we're relying on HA to pass an integer; perhaps we should do atoi() and catch any exceptions
              return (int) x;        
            
      
binary_sensor:
  - platform: rc522
    uid: 73-F5-C5-0C
    name: "RC522 RFID Tag"
    id: TAG
  - platform: rc522    
    uid: E3-7B-C0-1C
    name: "RC522 RFID CARD"
    id: CARD
  # Door Magnetic Sensor    
  - platform: gpio
    pin:
      number: 33
      mode:
        input: true
        pullup: true
    name: "Front Door"
    id: frontdoor
    device_class: door
  - platform: homeassistant    
    id: backlight_on
    entity_id: input_boolean.lcd_display_backlight_on
    internal: true  


# Enable logging
logger:
 baud_rate: 0

# Enable Home Assistant API
api:
  #encryption:
  # key: "SkBpGdXnb86EdEupLPLPGl8WUEQKKkfFbodY3wsYfRI="

# Allow Over-The-Air updates
ota:

# Allow provisioning Wi-Fi via serial
#improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp Hotspot"
    password: "123654789"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:




# To have a "next url" for improv serial
web_server:
    port: 8081
    auth:
     username: !secret web_server_username
     password: !secret web_server_password
